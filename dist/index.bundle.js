/******/ (() => { // webpackBootstrap
var __webpack_exports__ = {};
/*!*********************!*\
  !*** ./src/main.js ***!
  \*********************/
// import './style.css';
// OBJECT: Gameboard IIFE
var Gameboard = function () {
  'use strict';

  var _gameboard = Array.from(Array(6).keys());

  function getGameboard() {
    return _gameboard;
  }

  return {
    getGameboard: getGameboard
  };
}();

Gameboard.getGameboard();
/* ========================================================= */
// OBJECT: Player Factory

var Player = function Player(name, playerType) {
  var moves = [0, 1]; // Public methods

  function getMoves() {
    return console.log(name, moves);
  }

  function setMoves(move) {
    moves.push(move);
  }

  return {
    getMoves: getMoves,
    setMoves: setMoves
  };
};

var playerOne = Player('player1');
var playerTwo = Player('player2');
playerOne.getMoves();
playerTwo.getMoves();
playerOne.setMoves(5);
playerOne.getMoves();
playerTwo.getMoves();
/* ========================================================= */
// OBJECT: Flow of game controls

var Game = function () {
  'use strict';

  var testValue = 555;

  function startGame() {}

  function testMethod() {
    console.log(testValue);
  }

  return {
    testMethod: testMethod
  };
}();

Game.testMethod(); // 1. Perform intial processing
// 2. Processing module inside loop
// 3. Final Processing Moudle
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguYnVuZGxlLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFFQTtBQUNBLElBQU1BLFNBQVMsR0FBSSxZQUFZO0FBQzlCOztBQUVBLE1BQU1DLFVBQVUsR0FBR0MsS0FBSyxDQUFDQyxJQUFOLENBQVdELEtBQUssQ0FBQyxDQUFELENBQUwsQ0FBU0UsSUFBVCxFQUFYLENBQW5COztBQUVBLFdBQVNDLFlBQVQsR0FBd0I7QUFDdkIsV0FBT0osVUFBUDtBQUNBOztBQUVELFNBQU87QUFBRUksSUFBQUEsWUFBWSxFQUFaQTtBQUFGLEdBQVA7QUFDQSxDQVZpQixFQUFsQjs7QUFZQUwsU0FBUyxDQUFDSyxZQUFWO0FBQ0E7QUFDQTs7QUFDQSxJQUFNQyxNQUFNLEdBQUcsU0FBVEEsTUFBUyxDQUFVQyxJQUFWLEVBQWdCQyxVQUFoQixFQUE0QjtBQUMxQyxNQUFJQyxLQUFLLEdBQUcsQ0FBQyxDQUFELEVBQUksQ0FBSixDQUFaLENBRDBDLENBRzFDOztBQUNBLFdBQVNDLFFBQVQsR0FBb0I7QUFDbkIsV0FBT0MsT0FBTyxDQUFDQyxHQUFSLENBQVlMLElBQVosRUFBa0JFLEtBQWxCLENBQVA7QUFDQTs7QUFDRCxXQUFTSSxRQUFULENBQWtCQyxJQUFsQixFQUF3QjtBQUN2QkwsSUFBQUEsS0FBSyxDQUFDTSxJQUFOLENBQVdELElBQVg7QUFDQTs7QUFFRCxTQUFPO0FBQUVKLElBQUFBLFFBQVEsRUFBUkEsUUFBRjtBQUFZRyxJQUFBQSxRQUFRLEVBQVJBO0FBQVosR0FBUDtBQUNBLENBWkQ7O0FBY0EsSUFBTUcsU0FBUyxHQUFHVixNQUFNLENBQUMsU0FBRCxDQUF4QjtBQUNBLElBQU1XLFNBQVMsR0FBR1gsTUFBTSxDQUFDLFNBQUQsQ0FBeEI7QUFFQVUsU0FBUyxDQUFDTixRQUFWO0FBQ0FPLFNBQVMsQ0FBQ1AsUUFBVjtBQUVBTSxTQUFTLENBQUNILFFBQVYsQ0FBbUIsQ0FBbkI7QUFFQUcsU0FBUyxDQUFDTixRQUFWO0FBQ0FPLFNBQVMsQ0FBQ1AsUUFBVjtBQUNBO0FBQ0E7O0FBQ0EsSUFBTVEsSUFBSSxHQUFJLFlBQVk7QUFDekI7O0FBRUEsTUFBTUMsU0FBUyxHQUFHLEdBQWxCOztBQUVHLFdBQVNDLFNBQVQsR0FBcUIsQ0FFcEI7O0FBU0QsV0FBU0MsVUFBVCxHQUFzQjtBQUN4QlYsSUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVlPLFNBQVo7QUFDQTs7QUFFRCxTQUFPO0FBQUVFLElBQUFBLFVBQVUsRUFBVkE7QUFBRixHQUFQO0FBQ0EsQ0FyQlksRUFBYjs7QUF1QkFILElBQUksQ0FBQ0csVUFBTCxJQUVBO0FBQ0E7QUFDQSw2QiIsInNvdXJjZXMiOlsid2VicGFjazovL3Byb2plY3QtdGljLXRhYy10b2UvLi9zcmMvbWFpbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBpbXBvcnQgJy4vc3R5bGUuY3NzJztcblxuLy8gT0JKRUNUOiBHYW1lYm9hcmQgSUlGRVxuY29uc3QgR2FtZWJvYXJkID0gKGZ1bmN0aW9uICgpIHtcblx0J3VzZSBzdHJpY3QnO1xuXG5cdGNvbnN0IF9nYW1lYm9hcmQgPSBBcnJheS5mcm9tKEFycmF5KDYpLmtleXMoKSk7XG5cblx0ZnVuY3Rpb24gZ2V0R2FtZWJvYXJkKCkge1xuXHRcdHJldHVybiBfZ2FtZWJvYXJkO1xuXHR9XG5cblx0cmV0dXJuIHsgZ2V0R2FtZWJvYXJkIH07XG59KSgpO1xuXG5HYW1lYm9hcmQuZ2V0R2FtZWJvYXJkKCk7XG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cbi8vIE9CSkVDVDogUGxheWVyIEZhY3RvcnlcbmNvbnN0IFBsYXllciA9IGZ1bmN0aW9uIChuYW1lLCBwbGF5ZXJUeXBlKSB7XG5cdGxldCBtb3ZlcyA9IFswLCAxXTtcblxuXHQvLyBQdWJsaWMgbWV0aG9kc1xuXHRmdW5jdGlvbiBnZXRNb3ZlcygpIHtcblx0XHRyZXR1cm4gY29uc29sZS5sb2cobmFtZSwgbW92ZXMpO1xuXHR9XG5cdGZ1bmN0aW9uIHNldE1vdmVzKG1vdmUpIHtcblx0XHRtb3Zlcy5wdXNoKG1vdmUpO1xuXHR9XG5cblx0cmV0dXJuIHsgZ2V0TW92ZXMsIHNldE1vdmVzIH07XG59O1xuXG5jb25zdCBwbGF5ZXJPbmUgPSBQbGF5ZXIoJ3BsYXllcjEnKTtcbmNvbnN0IHBsYXllclR3byA9IFBsYXllcigncGxheWVyMicpO1xuXG5wbGF5ZXJPbmUuZ2V0TW92ZXMoKTtcbnBsYXllclR3by5nZXRNb3ZlcygpO1xuXG5wbGF5ZXJPbmUuc2V0TW92ZXMoNSk7XG5cbnBsYXllck9uZS5nZXRNb3ZlcygpO1xucGxheWVyVHdvLmdldE1vdmVzKCk7XG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cbi8vIE9CSkVDVDogRmxvdyBvZiBnYW1lIGNvbnRyb2xzXG5jb25zdCBHYW1lID0gKGZ1bmN0aW9uICgpIHtcblx0J3VzZSBzdHJpY3QnO1xuXG5cdGNvbnN0IHRlc3RWYWx1ZSA9IDU1NTtcblxuICAgIGZ1bmN0aW9uIHN0YXJ0R2FtZSgpIHtcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIGZ1bmN0aW9uIHRlc3RNZXRob2QoKSB7XG5cdFx0Y29uc29sZS5sb2codGVzdFZhbHVlKTtcblx0fVxuXG5cdHJldHVybiB7IHRlc3RNZXRob2QgfTtcbn0pKCk7XG5cbkdhbWUudGVzdE1ldGhvZCgpO1xuXG4vLyAxLiBQZXJmb3JtIGludGlhbCBwcm9jZXNzaW5nXG4vLyAyLiBQcm9jZXNzaW5nIG1vZHVsZSBpbnNpZGUgbG9vcFxuLy8gMy4gRmluYWwgUHJvY2Vzc2luZyBNb3VkbGVcblxuIl0sIm5hbWVzIjpbIkdhbWVib2FyZCIsIl9nYW1lYm9hcmQiLCJBcnJheSIsImZyb20iLCJrZXlzIiwiZ2V0R2FtZWJvYXJkIiwiUGxheWVyIiwibmFtZSIsInBsYXllclR5cGUiLCJtb3ZlcyIsImdldE1vdmVzIiwiY29uc29sZSIsImxvZyIsInNldE1vdmVzIiwibW92ZSIsInB1c2giLCJwbGF5ZXJPbmUiLCJwbGF5ZXJUd28iLCJHYW1lIiwidGVzdFZhbHVlIiwic3RhcnRHYW1lIiwidGVzdE1ldGhvZCJdLCJzb3VyY2VSb290IjoiIn0=